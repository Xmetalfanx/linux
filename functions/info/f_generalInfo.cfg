. $infoDir/f_infoVars.cfg


# TESTING this idea
function osreleaseInfoTest()
{

  $2=$(awk -v awkVar="$1" -F '=' '/$0 ~ awkVar/ { print }' /etc/os-release )

  # For testing only
  userPrompt
}

function osreleaseInfo2()
{
  osreleaseInfoTest "^NAME=" "OSRELEASE_NAME"
}


#####################################################################

# yeah ... the funct. name could be better ..
function specificChecks()
{
  # For this to be logical ... .I need to know the distro at this point

  ## This is the code from Screenfetch and it's in /functions/info/f_desktopDetection.cfg
  echo -e "Detecting the current Desktop being used:"
  getDesktopInfoInxi

	# Check Architecture
	currentArchitecture=$(lscpu | grep Archit | sed 's/[ ]//g' | cut -d: -f2)


  # Detect GTK version
  #echo -e "Detecting GTK Version"
  # gtkVersionDetection
}

function scriptDependencyChecks()
{
  # Check for lsb_release and wget (not in arch by default)
    # not sure why but I have packageManDetection in lsbRelease
    # I can see a logic loop here ... I need to know if the distro is arch or Fedora ( I think) so i can install lsb on those distros that do not have it by default however i need to know the distroBase beforehand

    # I think my logic was I was relying on os-release info to detect what I needed to know

  lsbReleaseCheck
  wgetAndCurlCheck

  # I have a check for inxi ... should that be here?
	# for now things work so i will say "no" to not screw something up

}

function obtainDistroInformation()
{
  # Get info from lsb_release
  echo -e "Getting info based on lsb-release"
  lsbReleaseInfo

  # Gets info from /etc/os-release
  echo -e "Getting info from /etc/os-release file "
  osreleaseInfo


}

function determineDistro()
{
  if  [ "$pmanager" = "pacman" ] || \
      [ "$lsbDistribID" = "Arch" ] || \
      [ "$OSRELEASE_ID" = 'arch' ] || \
      [ "$OSRELEASE_ID" = 'anarchy' ]; then

        ## This is ok for Manjaro since the BASE is arch ... it's not saying the DISTRO is arch, here
        distroBase="arch"
        rollingRelease="yes"
        supported="yes"

		EOL="Rolling Release"

    #Debian
    elif  	[ "$OSRELEASE_ID" = "debian" ] || \
			[ "$OSRELEASE_ID" = "sparky" ] || \
          	[ "$OSRELEASE_NAME" =  "Debian GNU/Linux"  ] || \
          	[ "$lsbDistribID" = "Sparky" ] || \
		    [ "$lsbDistribID" = "debian" ]; then

            distroBase="debian"

            debianBranchCheck

    # Fedora
    ## on the third check, doublecheck (no pun) I have the correct file listed
    ## id may be a changed var ... it's the ID from OS release
    elif  [ "$pmanager" = "dnf" ] ||  \
          [ "$lsbDistribID" = "Fedora" ] || \
          [ -f /etc/fedora-release ] || \
          [ "$OSRELEASE_ID" = "fedora" ]; then

            distroBase="fedora"


            fedoraCheck

    #openSuse
    elif  [ "$pmanager" = "zypper" ] || \
          [ "$lsbDistribID" = "openSUSE" ] ||  \
          [ "$OSRELEASE_IDLIKE" = "opensuse suse" ]; then

            distroBase="opensuse"

            ## Function in /functions/checks/f_openSuseCheck.cfg
            openSuseCheck

    # Solus
    elif  [ "$pmanager" = "eopkg" ] || \
          [ "$lsbDistribID" = "Solus" ] || \
          [ "$OSRELEASE_ID" = "solus" ] || \
          [ "$OSRELEASE_NAME" = "Solus" ] || \
          [ -f /etc/solus-release ]; then

            distroBase="solus"
            rollingrelease="yes"
            supported="yes"

    # Ubuntu
    elif  [ "$lsbDistribID" = "Ubuntu" ] ||  \
          [ "$OSRELEASE_ID" = "ubuntu" ] ||  \
          [ "$OSRELEASE_ID" = "neon" ] ||  \
          [ "$OSRELEASE_IDLIKE" = "ubuntu" ]; then

            distroBase="ubuntu"

            ## Issues here ...
            ubuntuBaseCheck

            # Check if variable is empty and if so, set it's default
            # This var controls if
            if [ -z $ppaPackageInstall ]; then
                ppaPackageInstall=no
            else

			  return

            fi

    else
         # This should mean the variable does exist (maybe user set it) and do not touch it
				echo -e "Distro Base can not be detected"
				userPromp
    fi


}

function intialChecks
{
 	 # Get Dependencies needed by scripts
	scriptDependencyChecks

	# Gets info from os-release and lsb
	obtainDistroInformation

	echo -e "Distro Info now obtained"

	# USES info obtained to detarmine the distro
	determineDistro

	## Desktop check
	#echo
	echo -e "Specific Info Checks Started ... "
	specificChecks

	#clear
	echo
	echo "Detected Distro Base: $distroBase"

	distroBranchOutput

}